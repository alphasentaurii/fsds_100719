
class Clock:
    
    # # @property
    # def tz(self):
    #     import tzlocal as tz
    #     self.zone = tz.get_localzone()
    #     return  self.zone
    
    # @property.setter
    # def tz(self,value):
    #     self_zone = 
        
        
    
    def __init__(self):
        import datetime as dt
        import tzlocal as tz
        self.tz = tz.get_localzone()
        self.creation_time = dt.datetime.now(self.tz)
        
    def get_time(self):
        import datetime as dt
        now = dt.datetime.now(self.tz)
        print(now.strftime(f"%H %m-%d-%Y"))
        

        
    # @classmethod    
    def tic(self,label=''):
        import datetime as dt

        self._start = dt.datetime.now(self.tz)
        self._start_lab = label

    def toc(self,label=''):
        import datetime as dt

        self._end = dt.datetime.now(self.tz)
        self._end_label = label
        self._calc_elapsed()
        
        
    def _calc_elapsed(self):
        self.elapsed = self._end - self._start
        print(f"{self.elapsed} time elapsed.")

clock = Clock()
clock.tic()
# kety('')
# import pdb
# pdb.set_trace()
clock.toc()
clock.get_time()